---
What is this project?


simple JVM in Python that can only run "Hello World" 



---
Quick Start


```console
$ javac Main.java
$ ./jello.py Main.class
```


---
References

- [TsodingDaily](https://www.youtube.com/watch?v=67FmRyv8jTM&ab_channel=TsodingDaily)
- https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html
- https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html






---
A. 빅 엔디언, 리틀엔디언


Endianness는 1차원 배열인 메모리 주소에 바이트코드를 어떤 순서로 담을건지 정하는 것.

만약 메모리에 0x12345678 대입하려면,
빅 엔디언은 

0x100 -> 0x12\
0x101 -> 0x34\
0x102 -> 0x56\
0x103 -> 0x78\

순차적으로 담음. 리틀 엔디언은 반대로 담고.


빅 엔디언은 인간이 왼쪽에서 오른쪽으로 읽으니까, 디버그 편하게 해줌. 
근데 00 00 00 2A 읽으려면, 맨 끝에 저거 읽으려고 변수 주소에 3바이트 더해줘야 함.

근데 리틀 엔디언은 서순이 거꾸로라서 맨 앞에 하나 띡 읽고 넘어감.


보통 네트워크에서 TCP/IP같은 애들은 빅 엔디안 방식을 쓰고, 
jvm도 빅 엔디안 방식 쓴다.

리틀 엔디언은 intel 계열 프로세서에서 주로 사용한다고 한다.








---
B. .java 파일 해석 과정 


1. javac Example.java -> Example.class
    소스코드를 자바 컴파일러가 jvm이 이해할 수 있는 바이트코드로 변환 
2. python jello.py ./Example.class  
    jvm이 바이트코드를 읽고 해석해서 결과물 출력





public class Example {
    public static void main(String[] args) {
        System.out.println("Hello, World");
    }
}


얘를 javac Example.java 하면 Example.class가 만들어지는데, 얘를 vim으로 열어보면,


????4
	
<init>()VCodeLineNumberTablemain([Ljava/lang/String;)V
SourceFileExample.javaHello, WorldExamplejava/lang/Objectjava/lang/SystemoutLjava/io/PrintStream;java/io/PrintStreamprintln(Ljava/lang/String;)V!	*??
		%	???



음...어...

맨 앞에 ????4 저게 자바 매직 넘버인 CA FE BA BE 인가?


xxd Example.class 하면,

00000000: cafe babe 0000 0034 001d 0a00 0600 0f09  .......4........
00000010: 0010 0011 0800 120a 0013 0014 0700 1507  ................
00000020: 0016 0100 063c 696e 6974 3e01 0003 2829  .....<init>...()
00000030: 5601 0004 436f 6465 0100 0f4c 696e 654e  V...Code...LineN
00000040: 756d 6265 7254 6162 6c65 0100 046d 6169  umberTable...mai
00000050: 6e01 0016 285b 4c6a 6176 612f 6c61 6e67  n...([Ljava/lang
00000060: 2f53 7472 696e 673b 2956 0100 0a53 6f75  /String;)V...Sou
00000070: 7263 6546 696c 6501 000c 4578 616d 706c  rceFile...Exampl
00000080: 652e 6a61 7661 0c00 0700 0807 0017 0c00  e.java..........
00000090: 1800 1901 000c 4865 6c6c 6f2c 2057 6f72  ......Hello, Wor
000000a0: 6c64 0700 1a0c 001b 001c 0100 0745 7861  ld...........Exa
000000b0: 6d70 6c65 0100 106a 6176 612f 6c61 6e67  mple...java/lang
000000c0: 2f4f 626a 6563 7401 0010 6a61 7661 2f6c  /Object...java/l
000000d0: 616e 672f 5379 7374 656d 0100 036f 7574  ang/System...out
000000e0: 0100 154c 6a61 7661 2f69 6f2f 5072 696e  ...Ljava/io/Prin
000000f0: 7453 7472 6561 6d3b 0100 136a 6176 612f  tStream;...java/
00000100: 696f 2f50 7269 6e74 5374 7265 616d 0100  io/PrintStream..
00000110: 0770 7269 6e74 6c6e 0100 1528 4c6a 6176  .println...(Ljav
00000120: 612f 6c61 6e67 2f53 7472 696e 673b 2956  a/lang/String;)V
00000130: 0021 0005 0006 0000 0000 0002 0001 0007  .!..............
00000140: 0008 0001 0009 0000 001d 0001 0001 0000  ................
00000150: 0005 2ab7 0001 b100 0000 0100 0a00 0000  ..*.............
00000160: 0600 0100 0000 0100 0900 0b00 0c00 0100  ................
00000170: 0900 0000 2500 0200 0100 0000 09b2 0002  ....%...........
00000180: 1203 b600 04b1 0000 0001 000a 0000 000a  ................
00000190: 0002 0000 0003 0008 0004 0001 000d 0000  ................
000001a0: 0002 000e                                ....



와! 카페 아가씨! 

자바의 매직 넘버(모든 파일에 맨 앞에 오는 고정된 상수)는 카페 아가씨. 
ex. .png 이미지 파일의 매직 넘버는 .png임


ls -al로 Example.class보면 420바이트라는데,
(그냥 print("Hello World"); 인데, 로드된 바이트 코드가 420개.. 많기도 하다.)

26줄에 한줄당 16바이트니까 416바이트 

맨 마지막줄 4바이트 더하면 420바이트 맞네.


오른쪽에 보면 <init>부터 해서 뭔가 많이 얽혀있네.




다시 javap -c Example 하면, 

public class Example {
  public Example();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static void main(java.lang.String[]);
    Code:
       0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;
       3: ldc           #3                  // String Hello, World
       5: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V
       8: return
}



클래스 생성자가 만들어진게 보이고, 아 저기서 <init>이 쓰여졌구나 

메인 함수에 static이랑 ldc는 뭐지? LoaD Constant의 약자라는 추측이 있다네.

Constant는 jello.py에서 파서 부분에 정의한 CONSTANT_STRING 일거고, 저게 오른쪽에 "Hello, World"를 가르키는 부분이겠지?


invokevirtual은 jdk에 pre-defined 내장함수인 io모듈에 PrintStream 클래스에 println 함수 가져오는 것 같고,
저 ()V에 V는 virtual의 약자인가?
가상함수... 음... 잘 모르는건데. 일단 패스 




python jello.py ./Example.class 하면,


{'access_flags': ['ACC_PUBLIC', 'ACC_SUPER'],
 'attributes': [{'attribute_name_index': 13, 'info': b'\x00\x0e'}],
 'constant_pool': [{'class_index': 6,   //이 파일에 있는 모든 public, static, void, return, variable, constructor등을 파싱한 것인 듯. 근데 각 파싱한 내용이 다른 내용에 reference 되있음. 예를들어 super class와 자식클래스라던지..   ->  이걸 트리 형식으로 만드는게 더 좋지 않을까? 라는 의견도 나옴
                    'name_and_type_index': 15,
                    'tag': 'CONSTANT_Methodref'},
                   {'class_index': 16,
                    'name_and_type_index': 17,
                    'tag': 'CONSTANT_Fieldref'},
                   {'string_index': 18, 'tag': 'CONSTANT_String'},
                   {'class_index': 19,
                    'name_and_type_index': 20,
                    'tag': 'CONSTANT_Methodref'},
                   {'name_index': 21, 'tag': 'CONSTANT_Class'},
                   {'name_index': 22, 'tag': 'CONSTANT_Class'},
                   {'bytes': b'<init>', 'tag': 'CONSTANT_Utf8'},
                   {'bytes': b'()V', 'tag': 'CONSTANT_Utf8'},
                   {'bytes': b'Code', 'tag': 'CONSTANT_Utf8'},
                   {'bytes': b'LineNumberTable', 'tag': 'CONSTANT_Utf8'},
                   {'bytes': b'main', 'tag': 'CONSTANT_Utf8'},
                   {'bytes': b'([Ljava/lang/String;)V', 'tag': 'CONSTANT_Utf8'},
                   {'bytes': b'SourceFile', 'tag': 'CONSTANT_Utf8'},
                   {'bytes': b'Example.java', 'tag': 'CONSTANT_Utf8'},
                   {'descriptor_index': 8,
                    'name_index': 7,
                    'tag': 'CONSTANT_NameAndType'},
                   {'name_index': 23, 'tag': 'CONSTANT_Class'},
                   {'descriptor_index': 25,
                    'name_index': 24,
                    'tag': 'CONSTANT_NameAndType'},
                   {'bytes': b'Hello, World', 'tag': 'CONSTANT_Utf8'},
                   {'name_index': 26, 'tag': 'CONSTANT_Class'},
                   {'descriptor_index': 28,
                    'name_index': 27,
                    'tag': 'CONSTANT_NameAndType'},
                   {'bytes': b'Example', 'tag': 'CONSTANT_Utf8'},
                   {'bytes': b'java/lang/Object', 'tag': 'CONSTANT_Utf8'},
                   {'bytes': b'java/lang/System', 'tag': 'CONSTANT_Utf8'},
                   {'bytes': b'out', 'tag': 'CONSTANT_Utf8'},
                   {'bytes': b'Ljava/io/PrintStream;', 'tag': 'CONSTANT_Utf8'},
                   {'bytes': b'java/io/PrintStream', 'tag': 'CONSTANT_Utf8'},
                   {'bytes': b'println', 'tag': 'CONSTANT_Utf8'},
                   {'bytes': b'(Ljava/lang/String;)V', 'tag': 'CONSTANT_Utf8'}],
 'fields': [],
 'interfaces': [],
 'magic': '0xcafebabe',
 'major': 52,
 'methods': [{'access_flags': ['ACC_PUBLIC'], // 생성자 나타내는 듯?
              'attributes': [{'attribute_name_index': 9,
                              'info': b'\x00\x01\x00\x01\x00\x00\x00\x05'
                                      b'*\xb7\x00\x01\xb1\x00\x00\x00'
                                      b'\x01\x00\n\x00\x00\x00\x06\x00'
                                      b'\x01\x00\x00\x00\x01'}],
              'descriptor_index': 8,
              'name_index': 7},
             {'access_flags': ['ACC_PUBLIC', 'ACC_STATIC'], // static 붙은걸 보니 main 메서드 나타내는 듯?
              'attributes': [{'attribute_name_index': 9, 
                              'info': b'\x00\x02\x00\x01\x00\x00\x00\t'
                                      b'\xb2\x00\x02\x12\x03\xb6\x00\x04'
                                      b'\xb1\x00\x00\x00\x01\x00\n\x00'
                                      b'\x00\x00\n\x00\x02\x00\x00\x00'
                                      b'\x03\x00\x08\x00\x04'}],
              'descriptor_index': 12, 
              'name_index': 11}],
 'minor': 0,
 'super_class': 6, //1. java.io.PrintStream 2. java/lang/System, 3. java/lang/Object 4. java/lang/String 에서 super class만을 나타내는 듯? java, lang, io, System, Object랑 하나 더 뭐있지? 
 'this_class': 5}
Hello, World





원래는 맨 아래 결과값인 Hello, World만 뜨는게 정상인데,
중간에 바이트코드 파싱한 값을 print해봤음.


'constant_pool'은 public, constructor, return, static, method, "Hello World" 등 타입 잡을만한 요소들 다 들어가 있는 듯. 
좀 신기한건 constant_string 쓰면 되는데 constant_utf8로 따로 구분한 것?
java/lang/String은 당연히 constant_string인 것 같은데, 의외로 constant_utf8임 

'magic': '0xcafebabe' 도 보이네.

밑에 methods에서 위에 'ACC_PUBLIC'은 클래스를 의미하고 밑에 'ACC_STATIC'이 붙은건 print()가 있는 메인 메서드 의미하는 듯.
그리고 저 안에 'info'가 아까 javap -c Example 했었을 때 내용물이겠고.



CONSTANT_Methodref에서 <init>이 있는걸 보면, 생성자도 함수 취급 하는 듯. new Class() 하면, 생성자 '함수'가 실행되는 듯?

그리고 저 의문의 ()V는 method_descriptor인데, return type을 의미하는 듯?
아래 b'(Ljava/lang/String)V' 을 보면, System.out.println()에서 String type 반환하니까, 저리 쓰인 듯?
그리고 처음에 ()V는 아마 main method 의 반환타입이 void니까, 안에 아무것도 안들어있는 듯?




---
Q. how overloading works in java?

c++에서는 같은 이름의 다른 파라미터 가진 여러 함수를 mingle(하나의 함수로 변환)해서 내부적으로 처리한다고 함.
근데 자바의 경우, 각각 메서드 따로 관리하고, 안에 attribute가 다른걸로 구분함. 


---
Q. why binaries contain the class name?


1. debugging output ex. exception stacktraces 
2. reflection (java specific. c++ don't have this feature) 
3. methods that prints class names. ex. Class.for(HelloWorld.class).getName();




---
C. how jvm executes bytecode?


System.out.println("Hello World"); 를 parse해서 bytecode로 바꾸면, 

\xb2\x00\x07    // load System.out
\x12\r          // ldc "Hello World"
\xb6\x00\x0f    // invokevirtual
\xb1            // return 


이런식으로 변환되는데, 이게 하드웨어마다 컴파일러가 달라서 바이트코드도 다른가?
내가 컴파일한 결과값이랑 Tsoding의 컴파일한 결과값이랑 다르네?

\xb1 이게 return인건 똑같은거 같은데, 
\r 이런건 없음.  \t랑 \n은 있네. 

aarch64랑 다른 아키텍처(리눅스 다른 버전이라던지...)에서 javac가 컴파일해서 뱉는 바이트코드 결과값이 다른가봄.


load, ldc,에서 stack에 validation용 타입과 코드를 더하고, 
invokevirtual에서 실행한 후,
return에서 반환하는데, 내 생각엔 반환하기 직전에 stack에 쌓인 애들을 비우지 않을까...
아님 invokevirtual에서 pop으로 실행하던가...





---
D. how jvm validates cross-reference?

처음에 .java src file parse하면, 하나의 clazz라는 이름의 dictionary에 constant_pool 관련 정보가 들어가는데, 그 정보가 서로한테 cross-reference하는 방식.

예를들어, System.out.println("Hello World"); 라고 하면,

java.lang.String을 받는 Println() 이 constant_pool에 들어가있겠고,
System.out도 constant_pool에 들어가 있을텐데,
Println()이 System.out에 reference하는 식 


근데 이런 방식이면, reference한게 틀릴 수도 있잖아?
그래서 실행 전에 이 cross-reference된게 맞는지 검증하는 코드가 필요한데..

실제 jvm 뜯어보기 전엔 모르겠지..


---
E. assert()


개발중에 아직 구현 안된 부분은 assert(throw NotImplemented()) 쓰고 넘긴 후,
내가 구현하는 기능만 minimal하게 구현 

가장 기본 틀만 minimal하게 만들고, 확장하는 방식 
연역법 


